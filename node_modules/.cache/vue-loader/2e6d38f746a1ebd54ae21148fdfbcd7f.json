{"remainingRequest":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tengmei-1/Desktop/项目/test-git/Array-vue/src/components/item/itempar2.vue?vue&type=style&index=0&id=61b7a640&scoped=true&lang=scss&","dependencies":[{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/src/components/item/itempar2.vue","mtime":1578534856639},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/css-loader/dist/cjs.js","mtime":1578385552663},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1578385552870},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/postcss-loader/src/index.js","mtime":1578385552863},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/sass-loader/dist/cjs.js","mtime":1578387868470},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/cache-loader/dist/cjs.js","mtime":1578385544915},{"path":"/Users/tengmei-1/Desktop/项目/test-git/Array-vue/node_modules/vue-loader/lib/index.js","mtime":1578385552870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLml0ZW1wIHsKICAgIG1hcmdpbjogMTBweCAwOwp9CgouZGVsZXRlIHsKICAgIGN1cnNvcjogcG9pbnRlcjsKfQoKLmZsZXggewogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5tYXJnaW5fbCB7CiAgICBtYXJnaW4tbGVmdDogMTVweDsKfQoKLmJ1dHRvbSB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoK"},{"version":3,"sources":["itempar2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"itempar2.vue","sourceRoot":"src/components/item","sourcesContent":["<template>\n    <div class=\"itemp\">\n        <div v-for=\"item in arr\">\n            <item :choice=\"false\"></item>\n        </div>\n\n        <div class=\"inputNumber flex\">\n            <div>你选中了{{ nums }}注</div>\n            <div class=\"flex margin_l\">\n                <el-input-number\n                        v-model=\"num\"\n                        @change=\"handleChange\"\n                        :min=\"1\"\n                        :max=\"10\"\n                        label=\"描述文字\"\n                        size=\"small\"\n                ></el-input-number>\n                <p style=\"margin-left: 15px\">倍</p>\n            </div>\n            <div class=\"margin_l\">\n                <p>共{{ priceComputed }}元</p>\n            </div>\n        </div>\n        <div class=\"buttom\">\n            <el-button type=\"success\" @click=\"onSbmit\">确定选号</el-button>\n            <el-button type=\"success\" @click=\"buy\">确定下注</el-button>\n        </div>\n\n        <div>\n            <ul class=\"ul-box\">\n                <li v-for=\"(item,index) in chooseArray\">\n                    <p>{{item.str}}</p>\n                    <p>{{item.nums}}注</p>\n                    <p>{{item.num}}倍</p>\n                    <p>{{item.price}}元</p>\n                    <p>可中金额?</p>\n                    <p @click=\"ItemDelete(index)\" class=\"delete\">删除</p>\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\n    import item from './item'\n\n    export default {\n        name: '',\n        props: {\n            arr: {type: Array}\n        },\n        data() {\n            return {\n                price: 0,\n                num: '1',\n                nums: 0,\n                str: '',\n                childerArr: [],\n                BetNub: '',\n                newArray: [],\n                chooseArray: []\n            }\n        },\n        components: {\n            item\n        },\n        computed: {\n            //价格\n            priceComputed() {\n                this.price = this.num * 2 * this.nums;\n                return this.num * 2 * this.nums;\n            }\n        },\n        methods: {\n            buy() {\n\n            },\n            handleChange(value) {\n                console.log(value)\n            },\n            onSbmit() {\n                //数据---vuex\n                //先提交数据\n                if (this.price !== 0) {\n                    this.chooseArray.push({\n                        str: this.str,\n                        price: this.price,\n                        nums: this.nums,\n                        num: this.num\n                    });\n                } else {\n                    this.$notify.info({\n                        title: '消息',\n                        message: '当前注为0,请投注'\n                    });\n                }\n                this.childerArr = this.$children.filter(\n                    vm => vm.$options.name === 'items'\n                );\n                this.delete(this.childerArr)\n            },\n            submit() {\n                //每次计算前,先清空数据\n                this.newArray = [];\n                this.str = '';\n\n                this.childerArr = this.$children.filter(\n                    vm => vm.$options.name === 'items'\n                );\n                for (let i = 0; i < this.childerArr.length; i++) {\n                    let vm = this.$children[i];\n                    //当前选中的字符串序列\n                    this.forin(vm.activeItem, i);\n                    //计算注数\n                    this.newArray.push(vm.activeItem)\n                }\n                this.str = this.str.substr(0, this.str.length - 1);\n                let strs = this.str;\n                console.log(`当前选中:${strs}`);\n                //当前注数逻辑\n                this.Bet();\n            },\n            forin(arr) {\n                if (arr.length === 0) {\n                    return;\n                } else {\n                    for (let j = 0; j < arr.length; j++) {\n                        if (j + 1 === arr.length) {\n                            this.str += arr[j] + ','\n                        } else {\n                            this.str += arr[j] + ' '\n                        }\n                    }\n                }\n            },\n            Bet() {\n                let arrangementArray = this.newArray;\n                // console.log('计算的数组')\n                // console.log(this.newArray);\n                let arrangement = this.getArrayByArrays(arrangementArray)\n                // console.log(arrangement)\n                //拆解数组\n                let oneArray = this.Dismantling(arrangement);\n                this.nums = oneArray.length;\n                // console.log(`${this.num}注`)\n            },\n            Dismantling(arr) {\n                // console.log(`传进来的数组`)\n                // console.log(arr)\n                let DismantlingArrs = [];\n                var strArr = new Array();\n                arr.forEach(vm => {\n                    // console.log(vm[0]);\n                    //定义一数组\n                    strArr = vm[0].split(',') //字符分割\n                    // console.log(`去重前的结果所有排列组合`)\n                    // console.log(strArr)\n                    let strArrs = this.unique(strArr)\n                    // console.log(`去重后的结果${strArrs}`)\n                    if (strArrs.length === strArr.length) {\n                        DismantlingArrs.push(strArrs)\n                    }\n                });\n                // console.log('返回的数组')\n                // console.log(DismantlingArrs);\n                return DismantlingArrs\n            },\n            unique(arr) {\n                const res = new Map();\n                return arr.filter(a => !res.has(a) && res.set(a, 1))\n            },\n            //清空\n            delete(arr) {\n                for (let i = 0; i < arr.length; i++) {\n                    let vm = arr[i];\n                    vm.activeItem = []\n                }\n                this.str = '';\n                this.newArray = [];\n                this.nums = 0;\n                this.num = 1;\n                // console.log('删除')\n            },\n            //二维数组排列组合\n            getArrayByArrays(arrays) {\n                var arr = ['']\n                for (var i = 0; i < arrays.length; i++) {\n                    arr = this.getValuesByArray(arr, arrays[i])\n                }\n                return arr\n            },\n            getValuesByArray(arr1, arr2) {\n                var arr = [];\n                for (var i = 0; i < arr1.length; i++) {\n                    var v1 = arr1[i];\n                    for (var j = 0; j < arr2.length; j++) {\n                        var v2 = arr2[j]\n                        if (v1 === '') {\n                            var value = [`${v2}`];\n                            arr.push(value)\n                        } else {\n                            var value = [`${v1},${v2}`];\n                            arr.push(value)\n                        }\n                    }\n                }\n                return arr\n            },\n           ItemDelete(index) {\n                this.chooseArray.splice(index, 1)\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"scss\" type=\"text/scss\">\n    .itemp {\n        margin: 10px 0;\n    }\n\n    .delete {\n        cursor: pointer;\n    }\n\n    .flex {\n        display: flex;\n        align-items: center;\n    }\n\n    .margin_l {\n        margin-left: 15px;\n    }\n\n    .buttom {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n    }\n\n</style>\n"]}]}